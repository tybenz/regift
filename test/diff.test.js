// Generated by CoffeeScript 1.7.1
(function() {
  var Blob, Diff, fixtures, git, should;

  should = require('should');

  fixtures = require('./fixtures');

  git = require('../src');

  Diff = require('../src/diff');

  Blob = require('../src/blob');

  describe("Diff", function() {
    describe(".parse", function() {
      return describe("simple editing", function() {
        var diffs, repo, stdout;
        repo = fixtures.tagged;
        stdout = "diff --git a/file.txt b/file.txt\nindex d00491f..48082f7 100644\n--- a/file.txt\n+++ b/file.txt\n@@ -1 +1 @@\n-1\n+12";
        diffs = Diff.parse(repo, stdout);
        it("is an Array of Diffs", function() {
          diffs.should.be.an["instanceof"](Array);
          return diffs[0].should.be.an["instanceof"](Diff);
        });
        it("has one diff", function() {
          return diffs.should.have.lengthOf(1);
        });
        return describe("the first diff", function() {
          var blob, change, diff, path, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
          diff = diffs[0];
          it("has the repo", function() {
            return diff.repo.should.eql(repo);
          });
          _ref = ["a_blob", "b_blob"];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            blob = _ref[_i];
            it("has a " + blob, function() {
              return diff[blob].should.be.an["instanceof"](Blob);
            });
          }
          _ref1 = ["a_path", "b_path"];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            path = _ref1[_j];
            it("has a " + path, function() {
              return diff[path].should.eql("file.txt");
            });
          }
          it("has a b_mode", function() {
            return diff.b_mode.should.eql("100644");
          });
          _ref2 = ["new_file", "renamed_file", "deleted_file"];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            change = _ref2[_k];
            it("" + change + " is false", function() {
              return diff[change].should.be["false"];
            });
          }
          return it("has a similarity_index of 0", function() {
            return diff.similarity_index.should.eql(0);
          });
        });
      });
    });
    return describe(".parse_raw", function() {
      describe("simple editing", function() {
        var diffs, repo, stdout;
        repo = fixtures.tagged;
        stdout = ":100644 100644 95f6539... 0466f13... M  file.txt";
        diffs = Diff.parse_raw(repo, stdout);
        it("is an Array of Diffs", function() {
          diffs.should.be.an["instanceof"](Array);
          return diffs[0].should.be.an["instanceof"](Diff);
        });
        it("has one diff", function() {
          return diffs.should.have.lengthOf(1);
        });
        return describe("the first diff", function() {
          var blob, change, diff, path, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
          diff = diffs[0];
          it("has the repo", function() {
            return diff.repo.should.eql(repo);
          });
          _ref = ["a_blob", "b_blob"];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            blob = _ref[_i];
            it("has a " + blob, function() {
              return diff[blob].should.be.an["instanceof"](Blob);
            });
          }
          _ref1 = ["a_path", "b_path"];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            path = _ref1[_j];
            it("has a " + path, function() {
              return diff[path].should.eql("file.txt");
            });
          }
          it("has a b_mode", function() {
            return diff.b_mode.should.eql("100644");
          });
          _ref2 = ["new_file", "renamed_file", "deleted_file"];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            change = _ref2[_k];
            it("" + change + " is false", function() {
              return diff[change].should.be["false"];
            });
          }
          return it("has a similarity_index of 0", function() {
            return diff.similarity_index.should.eql(0);
          });
        });
      });
      describe("delete a file", function() {
        var diffs, repo, stdout;
        repo = fixtures.branched;
        stdout = "diff --git a/README.md b/README.md\nindex e4ff69d..c0efd1c 100644\n--- a/README.md\n+++ b/README.md\n@@ -1 +1 @@\n-Bla\n+Bla2\ndiff --git a/some/hi.txt b/some/hi.txt\ndeleted file mode 100644\nindex 6f1de24..0000000\n--- a/some/hi.txt\n+++ /dev/null\n@@ -1 +0,0 @@\n-!!!";
        diffs = Diff.parse(repo, stdout);
        it("has 2 diffs", function() {
          return diffs.should.have.lengthOf(2);
        });
        return describe("the second diff", function() {
          var diff;
          diff = diffs[1];
          return it("deletes a file", function() {
            return diff.deleted_file.should.be["true"];
          });
        });
      });
      return describe("create a file", function() {
        var diffs, repo, stdout;
        repo = fixtures.branched;
        stdout = "diff --git a/some/hi.txt b/some/hi.txt\nnew file mode 100644\nindex 0000000..6f1de24\n--- /dev/null\n+++ b/some/hi.txt\n@@ -0,0 +1 @@\n+!!!";
        diffs = Diff.parse(repo, stdout);
        return it("creates a file", function() {
          return diffs[0].new_file.should.be["true"];
        });
      });
    });
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var Repo, exec, fs, git, should;

  should = require('should');

  git = require('../src');

  Repo = require('../src/repo');

  fs = require("fs");

  exec = require('child_process').exec;

  describe("git", function() {
    describe("()", function() {
      var repo;
      repo = git("" + __dirname + "/fixtures/simple");
      return it("returns a Repo", function() {
        return repo.should.be.an["instanceof"](Repo);
      });
    });
    describe("init()", function() {
      var newRepositoryDir, repo;
      repo = null;
      newRepositoryDir = "" + __dirname + "/fixtures/new";
      before(function(done) {
        fs.mkdirSync(newRepositoryDir);
        return git.init(newRepositoryDir, function(err, _repo) {
          repo = _repo;
          return done(err);
        });
      });
      it("inits a Repo", function() {
        var bare;
        repo.should.be.an["instanceof"](Repo);
        bare = repo.bare || false;
        return bare.should.be["false"];
      });
      return after(function(done) {
        return exec("rm -rf " + newRepositoryDir, done);
      });
    });
    describe("init() bare", function() {
      var newRepositoryDir, repo;
      repo = null;
      newRepositoryDir = "" + __dirname + "/fixtures/bare";
      before(function(done) {
        fs.mkdirSync(newRepositoryDir);
        return git.init(newRepositoryDir, true, function(err, _repo) {
          repo = _repo;
          return done(err);
        });
      });
      it("inits a bare Repo", function() {
        var bare;
        repo.should.be.an["instanceof"](Repo);
        bare = repo.bare || false;
        return bare.should.be["true"];
      });
      return after(function(done) {
        return exec("rm -rf " + newRepositoryDir, done);
      });
    });
    return describe("clone()", function() {
      var newRepositoryDir, repo;
      this.timeout(30000);
      repo = null;
      newRepositoryDir = "" + __dirname + "/fixtures/clone";
      before(function(done) {
        return git.clone("https://github.com/notatestuser/gift.git", newRepositoryDir, function(err, _repo) {
          repo = _repo;
          return done(err);
        });
      });
      it("clone a repository", function(done) {
        repo.should.be.an["instanceof"](Repo);
        return repo.remote_list(function(err, remotes) {
          remotes.should.have.length(1);
          return done();
        });
      });
      return after(function(done) {
        return exec("rm -rf " + newRepositoryDir, done);
      });
    });
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var Commit, Head, Ref, fixtures, git, should, _, _ref;

  _ = require('underscore');

  should = require('should');

  fixtures = require('./fixtures');

  git = require('../src');

  Commit = require('../src/commit');

  _ref = require('../src/ref'), Ref = _ref.Ref, Head = _ref.Head;

  describe("Ref", function() {
    return describe(".find_all", function() {
      return describe("find remotes", function() {
        var remotes, repo;
        repo = fixtures.remotes;
        remotes = null;
        before(function(done) {
          return Ref.find_all(repo, "remote", Ref, function(err, _remotes) {
            remotes = _remotes;
            return done(err);
          });
        });
        it("is an Array of Refs", function() {
          remotes.should.be.an["instanceof"](Array);
          return remotes[0].should.be.an["instanceof"](Ref);
        });
        it("the first item is a remote", function() {
          remotes[0].name.should.eql("origin/HEAD");
          return remotes[0].commit.should.be.an["instanceof"](Commit);
        });
        return it("the second item is a remote", function() {
          remotes[1].name.should.eql("origin/master");
          return remotes[1].commit.should.be.an["instanceof"](Commit);
        });
      });
    });
  });

  describe("Head", function() {
    describe(".find_all", function() {
      var heads, repo;
      repo = fixtures.branched;
      heads = null;
      before(function(done) {
        return Head.find_all(repo, function(err, h) {
          heads = h;
          return done(err);
        });
      });
      it("is an Array of Heads", function() {
        heads.should.be.an["instanceof"](Array);
        return heads[0].should.be.an["instanceof"](Head);
      });
      return it("contains the branches", function() {
        var names;
        heads.should.have.lengthOf(2);
        names = _.map(heads, (function(b) {
          return b.name;
        }));
        names.should.containEql("master");
        return names.should.containEql("something");
      });
    });
    return describe(".current", function() {
      var branch, repo;
      repo = fixtures.branched;
      branch = null;
      before(function(done) {
        return Head.current(repo, function(err, b) {
          branch = b;
          return done(err);
        });
      });
      it("is a Head", function() {
        return branch.should.be.an["instanceof"](Head);
      });
      return it("has the correct name", function() {
        return branch.name.should.eql("master");
      });
    });
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var Blob, Submodule, Tree, fixtures, git, should;

  should = require('should');

  fixtures = require('./fixtures');

  git = require('../src');

  Tree = require('../src/tree');

  Blob = require('../src/blob');

  Submodule = require('../src/submodule');

  describe("Tree", function() {
    describe("#contents", function() {
      describe("simple", function() {
        var contents, repo, tree;
        repo = fixtures.branched;
        tree = repo.tree();
        contents = null;
        before(function(done) {
          return tree.contents(function(err, _contents) {
            contents = _contents;
            return done(err);
          });
        });
        it("is an Array", function() {
          return contents.should.be.an["instanceof"](Array);
        });
        it("contains a Blob", function() {
          contents[0].should.be.an["instanceof"](Blob);
          return contents[0].name.should.eql("README.md");
        });
        return it("contains a Tree", function() {
          contents[1].should.be.an["instanceof"](Tree);
          return contents[1].name.should.eql("some");
        });
      });
      return describe("with submodules", function() {
        var contents, repo, tree;
        repo = fixtures.submodule;
        tree = repo.tree();
        contents = null;
        before(function(done) {
          return tree.contents(function(err, _contents) {
            contents = _contents;
            return done(err);
          });
        });
        return it("contains a Submodule", function(done) {
          contents[2].should.be.an["instanceof"](Submodule);
          contents[2].name.should.eql("spoon-knife");
          return contents[2].url(function(err, url) {
            url.should.eql("git://github.com/octocat/Spoon-Knife.git");
            return done(err);
          });
        });
      });
    });
    describe("#blobs", function() {
      var blobs, repo, tree;
      repo = fixtures.branched;
      tree = repo.tree();
      blobs = null;
      before(function(done) {
        return tree.blobs(function(err, _blobs) {
          blobs = _blobs;
          return done(err);
        });
      });
      it("has only 1 item", function() {
        return blobs.should.have.lengthOf(1);
      });
      return it("contains a Blob", function() {
        blobs[0].should.be.an["instanceof"](Blob);
        return blobs[0].name.should.eql("README.md");
      });
    });
    describe("#trees", function() {
      var repo, tree, trees;
      repo = fixtures.branched;
      tree = repo.tree();
      trees = null;
      before(function(done) {
        return tree.trees(function(err, _trees) {
          trees = _trees;
          return done(err);
        });
      });
      it("has only 1 item", function() {
        return trees.should.have.lengthOf(1);
      });
      return it("contains a Tree", function() {
        trees[0].should.be.an["instanceof"](Tree);
        return trees[0].name.should.eql("some");
      });
    });
    return describe("#find", function() {
      var repo, tree;
      repo = fixtures.branched;
      tree = repo.tree();
      describe("find a file", function() {
        var blob;
        blob = null;
        before(function(done) {
          return tree.find("README.md", function(err, _blob) {
            blob = _blob;
            return done(err);
          });
        });
        return it("finds the Blob", function() {
          blob.should.be.an["instanceof"](Blob);
          return blob.name.should.eql("README.md");
        });
      });
      describe("find a directory", function() {
        var subtree;
        subtree = null;
        before(function(done) {
          return tree.find("some", function(err, _tree) {
            subtree = _tree;
            return done(err);
          });
        });
        return it("finds the Tree", function() {
          subtree.should.be.an["instanceof"](Tree);
          return subtree.name.should.eql("some");
        });
      });
      describe("find inside a directory", function() {
        var blob;
        blob = null;
        before(function(done) {
          return tree.find("some/hi.txt", function(err, _blob) {
            blob = _blob;
            return done(err);
          });
        });
        return it("finds the Blob", function() {
          blob.should.be.an["instanceof"](Blob);
          return blob.name.should.eql("hi.txt");
        });
      });
      return describe("find a nonexistant file", function() {
        var subtree;
        subtree = null;
        before(function(done) {
          return tree.find("nonexistant", function(err, _tree) {
            subtree = _tree;
            return done(err);
          });
        });
        return it("is null", function() {
          return should.not.exist(subtree);
        });
      });
    });
  });

}).call(this);
